version: "3.8"

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: graphsense-postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-graphsense}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    restart: unless-stopped
    networks:
      - graphsense-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-graphsense}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  neo4j:
    image: neo4j:latest
    container_name: graphsense-neo4j
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
      - neo4j_conf:/conf
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH:-none}
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4J_PLUGINS=apoc
    ports:
      - "${NEO4J_HTTP_PORT:-7474}:7474"
      - "${NEO4J_BOLT_PORT:-7687}:7687"
    restart: unless-stopped
    networks:
      - graphsense-network
    healthcheck:
      test:
        [
          "CMD",
          "cypher-shell",
          "-u",
          "neo4j",
          "-p",
          "${NEO4J_PASSWORD:-}",
          "RETURN 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  app:
    build: .
    container_name: graphsense-app
    ports:
      - "${PORT:-8080}:8080"
    environment:
      # Repository Configuration
      - REPO_PATH=${REPO_PATH}
      - HOME=/app
      - LOCAL_REPO_PATH=/home/repo

      # API Keys
      - GOOGLE_GENERATIVE_AI_API_KEY=${GOOGLE_GENERATIVE_AI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - CO_API_KEY=${CO_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}

      # Application Configuration
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=8080
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - INDEX_FROM_SCRATCH=${INDEX_FROM_SCRATCH:-false}

      # PostgreSQL Configuration
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-graphsense}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-graphsense}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}

      # Neo4j Configuration
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-}

      # Security Configuration
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900000}

      # Debug Configuration
      - DEBUG=${DEBUG:-}
    volumes:
      - ${HOME}/.ssh:/root/.ssh:ro
      - ${REPO_PATH}:/home/repo:ro
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - graphsense-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  graphsense-network:
    driver: bridge

volumes:
  postgres_data:
    name: graphsense_postgres_data
  neo4j_data:
    name: graphsense_neo4j_data
  neo4j_logs:
    name: graphsense_neo4j_logs
  neo4j_plugins:
    name: graphsense_neo4j_plugins
  neo4j_conf:
    name: graphsense_neo4j_conf
  app_repos:
    name: graphsense_app_repos
